formatter: "markdown table"

version: ""

header-from: main.tf
footer-from: ""

sections:
  hide: []
  show: []

content: |-
  # k8s-helm-packages

  This repository contains a Terraform Module that implements a procedure to handle repeatable releases of Helm Charts
  in a Kubernetes cluster. 
  
  This Module is an utility adapter on top of the `helm_release` resource.

  ## Compatibility

  Use this module with the Terraform 1.3.0+ version and EKS on AWS Cloud.

  ## Requirements
  
  This Module requires that AWS CLI is available along the Terraform binary. It is necessary because 
  the Module configures the Helm provider to overcome the short time to live of the session tokens for the
  interaction with the Kubernetes API server.
  
  ## Features

  * Allows installing a list of Helm Charts;
  
  * Allows injecting custom values.yaml configurations that will override the default chart's configurations;
  
  * Allows injecting only a few parameters that will override the default chart's configuration;
  
  * Allows injecting secrets in a secure manner;
  
  ## Core concepts
  
  * [What is EKS?](https://docs.aws.amazon.com/eks/index.html);
  
  * [What is Kubernetes?](https://kubernetes.io/docs/home/);
  
  * [What is the Helm Provider for Kubernetes](https://registry.terraform.io/providers/hashicorp/helm/latest/docs);
  
  * [How is configured the Helm Provider in this Module](https://registry.terraform.io/providers/hashicorp/helm/latest/docs#exec-plugins).
  
  ## Example usage
  
  ```
  module "k8s_cluster_services" {
  source = "${SPECIFY_HERE_THE_LOCATION_WHERE_THE_MODULE_IS_HOSTED}"
  kubernetes_cluster = {
    url                                      = module.eks.cluster_endpoint
    name                                     = module.eks.cluster_id
    certificate_authority_base64encoded_data = module.eks.cluster_certificate_authority_data
  }
  charts = [
    {
      namespace  = "kube-monitoring"
      repository = "https://prometheus-community.github.io/helm-charts"
      app = {
        name             = "kube-prometheus-stack"
        chart            = "kube-prometheus-stack"
        version          = "41.7.3"
        force_update     = true
        create_namespace = true
      }
    }
  ]
  ```
  
  In the example above, we assume:
  
  * The EKS cluster is created by a module in the same context as the code block;
  
  * The developer outlines the details of the Kubernetes API with the `kubernetes_cluster` input object;
  
  * The developer wants to deploy the Prometheus Operator chart with the default configurations.
  
  {{ .Requirements }}
  {{ .Providers }}
  {{ .Resources }}
  {{ .Inputs }}
  {{ .Outputs }}

output:
  file: "README.md"
  mode: replace

output-values:
  enabled: false
  from: ""

sort:
  enabled: true
  by: name

settings:
  anchor: true
  color: true
  default: true
  description: false
  escape: true
  hide-empty: false
  html: true
  indent: 2
  lockfile: true
  read-comments: true
  required: true
  sensitive: true
  type: true
