fullnameOverride: "public-ingress-nginx"
commonLabels:
  cluster_service: "true"
  public: "true"
controller:
  ingressClassResource:
    name: public-ingress-nginx
    enabled: "true"
    default: "true"
    controllerValue: "k8s.io/public-ingress-nginx"
  ingressClass: public-ingress-nginx
  extraArgs: {}
  extraEnvs: []
  affinity:
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchExpressions:
              - key: app.kubernetes.io/name
                operator: In
                values:
                  - ingress-nginx
              - key: app.kubernetes.io/instance
                operator: In
                values:
                  - ingress-nginx
              - key: app.kubernetes.io/component
                operator: In
                values:
                  - controller
          topologyKey: "kubernetes.io/hostname"
  topologySpreadConstraints:
    - maxSkew: 1
      topologyKey: topology.kubernetes.io/zone
      whenUnsatisfiable: DoNotSchedule
      labelSelector:
        matchLabels:
          app.kubernetes.io/instance: ingress-nginx-internal
  nodeSelector:
    kubernetes.io/os: linux
  resources:
    limits:
      cpu: 500m
      memory: 256Mi
    requests:
      cpu: 500m
      memory: 256Mi
  autoscaling:
    enabled: "true"
    minReplicas: 1
    maxReplicas: 7
    targetCPUUtilizationPercentage: 71
    targetMemoryUtilizationPercentage: 71
    behavior:
      scaleDown:
        stabilizationWindowSeconds: 300
        policies:
          - type: Pods
            value: 1
            periodSeconds: 180
      scaleUp:
        stabilizationWindowSeconds: 300
        policies:
          - type: Pods
            value: 2
            periodSeconds: 60
  autoscalingTemplate: []
  customTemplate:
    configMapName: ""
    configMapKey: ""
  service:
    enabled: "true"
    type: LoadBalancer
    external:
      enabled: "true"
  metrics:
    port: 10254
    portName: metrics
    enabled: "true"
    service:
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "10254"
      servicePort: 10254
      type: ClusterIP
    serviceMonitor:
      enabled: true
      scrapeInterval: 15s
      additionalLabels:
        release: kube-prometheus-stack
    prometheusRule:
      enabled: true
      additionalLabels:
        release: kube-prometheus-stack
      rules:
        - alert: NGINXConfigFailed
          expr: count(nginx_ingress_controller_config_last_reload_successful == 0) > 0
          for: 1s
          labels:
            severity: critical
          annotations:
            description: bad ingress config - nginx config test failed
            summary: uninstall the latest ingress changes to allow config reloads to resume
        - alert: NGINXCertificateExpiry
          expr: (avg(nginx_ingress_controller_ssl_expire_time_seconds) by (host) - time()) < 604800
          for: 1s
          labels:
            severity: critical
          annotations:
            description: ssl certificate(s) will expire in less then a week
            summary: renew expiring certificates to avoid downtime
        - alert: NGINXTooMany500s
          expr: 100 * ( sum( nginx_ingress_controller_requests{status=~"5.+"} ) / sum(nginx_ingress_controller_requests) ) > 5
          for: 1m
          labels:
            severity: warning
          annotations:
            description: Too many 5XXs
            summary: More than 5% of all requests returned 5XX, this requires your attention
        - alert: NGINXTooMany400s
          expr: 100 * ( sum( nginx_ingress_controller_requests{status=~"4.+"} ) / sum(nginx_ingress_controller_requests) ) > 5
          for: 1m
          labels:
            severity: warning
          annotations:
            description: Too many 4XXs
            summary: More than 5% of all requests returned 4XX, this requires your attention
tcp: {}
udp: {}